{
  "name": "mouse-trailer-demo",
  "type": "registry:ui",
  "description": "Colorful mouse trailer with bunch of customization options.",
  "componentName": "mouse-trailer-demo",
  "files": [
    {
      "path": "mouse-trailer-demo.tsx",
      "content": "\"use client\";\r\nimport React, { useState } from \"react\";\r\nimport { BlurEffect, FadeEffect, MouseTrailer, MouseTrailerProps } from \"@/content/mouse-trailer\";\r\n\r\ninterface Settings {\r\n  trailLength: number;\r\n  speed: number;\r\n  blur: BlurEffect;\r\n  fade: FadeEffect;\r\n  useCustomImage: boolean;\r\n  color: string;\r\n  size: number;\r\n  springPreset: MouseTrailerProps[\"springPreset\"];\r\n}\r\n\r\nconst MouseTrailerDemo: React.FC = () => {\r\n  const [settings, setSettings] = useState<Settings>({\r\n    trailLength: 20,\r\n    speed: 3,\r\n    blur: { enabled: true, intensity: 5 },\r\n    fade: { enabled: true, startOpacity: 1, endOpacity: 0.1 },\r\n    useCustomImage: false,\r\n    color: \"#3B82F6\",\r\n    size: 12,\r\n    springPreset: \"very-tight\",\r\n  });\r\n\r\n  const customImage = settings.useCustomImage\r\n    ? {\r\n        src: \"https://images.unsplash.com/photo-1618336753974-aae8e04506aa\",\r\n        width: 200,\r\n      }\r\n    : undefined;\r\n\r\n  return (\r\n    <>\r\n      <MouseTrailer\r\n        trailLength={settings.trailLength}\r\n        speed={settings.speed}\r\n        blur={settings.blur}\r\n        fade={settings.fade}\r\n        customImage={customImage}\r\n        color={settings.color}\r\n        size={settings.size}\r\n        springPreset={settings.springPreset}\r\n      />\r\n      <div className=\"bg-primary-foreground mx-auto my-5 max-w-md rounded-lg px-5 py-2.5 shadow-2xl\">\r\n        {/* <div className=\"place-items-center\"> */}\r\n        <p className=\"text-primary font-instrument-serif py-2 text-center text-xl tracking-wide underline\">\r\n          Configure the way you like\r\n        </p>\r\n        {/* </div> */}\r\n        <div className=\"space-y-3 font-sans\">\r\n          <div>\r\n            <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n              Trail Length: {settings.trailLength}\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"50\"\r\n              value={settings.trailLength}\r\n              onChange={(e) => setSettings({ ...settings, trailLength: parseInt(e.target.value) })}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n              Speed: {settings.speed}\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"10\"\r\n              value={settings.speed}\r\n              onChange={(e) => setSettings({ ...settings, speed: parseInt(e.target.value) })}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n              Size: {settings.size}px\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"4\"\r\n              max=\"48\"\r\n              value={settings.size}\r\n              onChange={(e) => setSettings({ ...settings, size: parseInt(e.target.value) })}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">Color</label>\r\n            <input\r\n              type=\"color\"\r\n              value={settings.color}\r\n              onChange={(e) => setSettings({ ...settings, color: e.target.value })}\r\n              className=\"h-8 w-full cursor-pointer rounded\"\r\n            />\r\n          </div>\r\n          {settings.useCustomImage && (\r\n            <div>\r\n              <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n                Spring Preset\r\n              </label>\r\n              <select\r\n                value={settings.springPreset as string}\r\n                onChange={(e) =>\r\n                  setSettings({\r\n                    ...settings,\r\n                    springPreset: e.target.value as Settings[\"springPreset\"],\r\n                  })\r\n                }\r\n                className=\"w-full rounded bg-gray-700 p-2 text-white\"\r\n              >\r\n                <option value=\"very-tight\">Very Tight</option>\r\n                <option value=\"controlled-snap\">Controlled Snap</option>\r\n                <option value=\"smooth-follow\">Smooth Follow</option>\r\n                <option value=\"strict-controlled\">Strict Controlled</option>\r\n              </select>\r\n            </div>\r\n          )}\r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"blur\"\r\n                checked={settings.blur.enabled}\r\n                onChange={(e) =>\r\n                  setSettings({\r\n                    ...settings,\r\n                    blur: { ...settings.blur, enabled: e.target.checked },\r\n                  })\r\n                }\r\n                className=\"mr-2\"\r\n              />\r\n              <label htmlFor=\"blur\" className=\"text-primary font-mono text-sm\">\r\n                Blur Effect\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"fade\"\r\n                checked={settings.fade.enabled}\r\n                onChange={(e) =>\r\n                  setSettings({\r\n                    ...settings,\r\n                    fade: { ...settings.fade, enabled: e.target.checked },\r\n                  })\r\n                }\r\n                className=\"mr-2\"\r\n              />\r\n              <label htmlFor=\"fade\" className=\"text-primary font-mono text-sm\">\r\n                Fade Effect\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"customImage\"\r\n                checked={settings.useCustomImage}\r\n                onChange={(e) =>\r\n                  setSettings({\r\n                    ...settings,\r\n                    useCustomImage: e.target.checked,\r\n                  })\r\n                }\r\n                className=\"mr-2\"\r\n              />\r\n              <label htmlFor=\"customImage\" className=\"text-primary font-mono text-sm\">\r\n                Use Image\r\n              </label>\r\n            </div>\r\n          </div>\r\n          {settings.blur.enabled && (\r\n            <div>\r\n              <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n                Blur Intensity: {settings.blur.intensity}\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"1\"\r\n                max=\"20\"\r\n                value={settings.blur.intensity}\r\n                onChange={(e) =>\r\n                  setSettings({\r\n                    ...settings,\r\n                    blur: { ...settings.blur, intensity: parseInt(e.target.value) },\r\n                  })\r\n                }\r\n                className=\"w-full\"\r\n              />\r\n            </div>\r\n          )}\r\n          {settings.fade.enabled && (\r\n            <div className=\"space-y-2\">\r\n              <div>\r\n                <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n                  Start Opacity: {settings.fade.startOpacity}\r\n                </label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"1\"\r\n                  step=\"0.1\"\r\n                  value={settings.fade.startOpacity}\r\n                  onChange={(e) =>\r\n                    setSettings({\r\n                      ...settings,\r\n                      fade: { ...settings.fade, startOpacity: parseFloat(e.target.value) },\r\n                    })\r\n                  }\r\n                  className=\"w-full\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"text-primary mb-1 block font-mono text-sm font-medium\">\r\n                  End Opacity: {settings.fade.endOpacity}\r\n                </label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"1\"\r\n                  step=\"0.1\"\r\n                  value={settings.fade.endOpacity}\r\n                  onChange={(e) =>\r\n                    setSettings({\r\n                      ...settings,\r\n                      fade: { ...settings.fade, endOpacity: parseFloat(e.target.value) },\r\n                    })\r\n                  }\r\n                  className=\"w-full\"\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MouseTrailerDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "component/content/mouse-trailer.tsx",
      "content": "import { cn } from \"@/lib/utils\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nexport interface TrailPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface BlurEffect {\r\n  enabled: boolean;\r\n  intensity: number;\r\n}\r\n\r\nexport interface FadeEffect {\r\n  enabled: boolean;\r\n  startOpacity: number;\r\n  endOpacity: number;\r\n}\r\n\r\nexport interface CustomImage {\r\n  src: string;\r\n  width: number;\r\n  height?: number;\r\n}\r\n\r\nexport interface SpringPreset {\r\n  stiffness: number;\r\n  damping: number;\r\n  mass: number;\r\n}\r\n\r\nexport interface MouseTrailerProps {\r\n  trailLength?: number;\r\n  speed?: number;\r\n  blur?: BlurEffect;\r\n  fade?: FadeEffect;\r\n  customImage?: CustomImage;\r\n  color?: string;\r\n  size?: number;\r\n  className?: string;\r\n  springPreset?:\r\n    | \"very-tight\"\r\n    | \"controlled-snap\"\r\n    | \"smooth-follow\"\r\n    | \"strict-controlled\"\r\n    | SpringPreset;\r\n}\r\n\r\nexport const MouseTrailer: React.FC<MouseTrailerProps> = ({\r\n  trailLength = 20,\r\n  speed = 3,\r\n  blur = { enabled: false, intensity: 5 },\r\n  fade = { enabled: false, startOpacity: 1, endOpacity: 0.1 },\r\n  customImage,\r\n  color = \"#3B82F6\",\r\n  size = 12,\r\n  springPreset = \"strict-controlled\",\r\n  className,\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const trailRef = useRef<TrailPoint[]>([]);\r\n  const mousePosRef = useRef<TrailPoint>({ x: 0, y: 0 });\r\n  const imagePosRef = useRef<TrailPoint>({ x: 0, y: 0 });\r\n  const velocityRef = useRef<TrailPoint>({ x: 0, y: 0 });\r\n  const animationFrameRef = useRef<number | null>(null);\r\n  const imageRef = useRef<HTMLImageElement | null>(null);\r\n\r\n  const presets: Record<string, SpringPreset> = {\r\n    \"very-tight\": { stiffness: 0.3, damping: 2, mass: 0.2 },\r\n    \"controlled-snap\": { stiffness: 0.2, damping: 0.8, mass: 0.7 },\r\n    \"smooth-follow\": { stiffness: 0.15, damping: 0.7, mass: 1.0 },\r\n    \"strict-controlled\": { stiffness: 0.15, damping: 5, mass: 0.5 },\r\n  };\r\n\r\n  const { stiffness, damping, mass } =\r\n    typeof springPreset === \"string\" ? presets[springPreset] : springPreset;\r\n\r\n  useEffect(() => {\r\n    if (customImage) {\r\n      const img = new Image();\r\n      img.src = customImage.src;\r\n      img.onload = () => {\r\n        imageRef.current = img;\r\n      };\r\n    } else {\r\n      imageRef.current = null;\r\n    }\r\n  }, [customImage?.src]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      mousePosRef.current = { x: e.clientX, y: e.clientY };\r\n    };\r\n\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      trailRef.current = [];\r\n      imagePosRef.current = { x: 0, y: 0 };\r\n      velocityRef.current = { x: 0, y: 0 };\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    let lastTime = 0;\r\n    const updateInterval = 1000 / (60 * speed);\r\n\r\n    const animate = (timestamp: number) => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      if (imageRef.current && customImage) {\r\n        // Spring-based motion for single image\r\n        const dx = mousePosRef.current.x - imagePosRef.current.x;\r\n        const dy = mousePosRef.current.y - imagePosRef.current.y;\r\n\r\n        // Calculate acceleration based on spring force\r\n        const ax = (stiffness * dx - damping * velocityRef.current.x) / mass;\r\n        const ay = (stiffness * dy - damping * velocityRef.current.y) / mass;\r\n\r\n        // Update velocity and position\r\n        velocityRef.current.x += ax / 60; // ~(60 FPS)\r\n        velocityRef.current.y += ay / 60;\r\n        imagePosRef.current.x += velocityRef.current.x;\r\n        imagePosRef.current.y += velocityRef.current.y;\r\n\r\n        // image at top-left corner of mouse position\r\n        ctx.drawImage(\r\n          imageRef.current,\r\n          imagePosRef.current.x,\r\n          imagePosRef.current.y,\r\n          customImage.width,\r\n          customImage.height || customImage.width\r\n        );\r\n      } else {\r\n        if (timestamp - lastTime >= updateInterval) {\r\n          trailRef.current.push({ ...mousePosRef.current });\r\n          if (trailRef.current.length > trailLength) {\r\n            trailRef.current.shift();\r\n          }\r\n          lastTime = timestamp;\r\n        }\r\n\r\n        trailRef.current.forEach((point, index) => {\r\n          const progress = 1 - index / (trailRef.current.length - 1);\r\n          const opacity = fade.enabled\r\n            ? fade.startOpacity + (fade.endOpacity - fade.startOpacity) * progress\r\n            : 1;\r\n          const blurAmount = blur.enabled ? blur.intensity * (1 - progress) : 0;\r\n\r\n          ctx.save();\r\n          ctx.globalAlpha = opacity;\r\n          if (blur.enabled) ctx.filter = `blur(${blurAmount}px)`;\r\n\r\n          ctx.beginPath();\r\n          ctx.arc(point.x, point.y, size / 2, 0, Math.PI * 2);\r\n          ctx.fillStyle = color;\r\n          ctx.fill();\r\n\r\n          ctx.restore();\r\n        });\r\n      }\r\n\r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animationFrameRef.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n    };\r\n  }, [trailLength, speed, blur, fade, customImage, color, size, stiffness, damping, mass]);\r\n\r\n  return (\r\n    <canvas ref={canvasRef} className={cn(\"pointer-events-none fixed inset-0 z-50\", className)} />\r\n  );\r\n};\r\n\r\nMouseTrailer.displayName = \"MouseTrailer\";\r\n\r\n// DevelopedBy: AetherUI\r\n",
      "type": "registry:ui"
    }
  ]
}
