{
  "name": "feedback-modal-demo",
  "type": "registry:ui",
  "description": "A feedback/suggestion modal component with customizable content.",
  "componentName": "feedback-modal-demo",
  "files": [
    {
      "path": "feedback-modal-demo.tsx",
      "content": "\"use client\";\r\nimport FeedbackModal from \"@/content/feedback-modal\";\r\n\r\nconst FeedbackModalDemo = () => {\r\n  function log(val: string) {\r\n    // Simulate an API request that takes 2 seconds\r\n    return new Promise<void>((resolve) => {\r\n      setTimeout(() => {\r\n        console.log(\"feedback modal:\", val);\r\n        resolve();\r\n      }, 2000);\r\n    });\r\n  }\r\n  return <FeedbackModal customId=\"feedback-modal-demo\" callback={log} />;\r\n};\r\n\r\nexport default FeedbackModalDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "component/content/feedback-modal.tsx",
      "content": "\"use client\";\r\nimport React, { createContext, useContext, useRef, useState } from \"react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useClickOutside } from \"@/hooks/useClickOutside\";\r\nimport { LoaderIcon } from \"lucide-react\";\r\n\r\ninterface ModalContextProps {\r\n  isOpen: boolean;\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  customId: string;\r\n  title: string;\r\n  placeholder: string;\r\n  setPlaceholder: React.Dispatch<React.SetStateAction<string>>;\r\n  callback?: (value: string, ...args: any) => Promise<void>;\r\n  loading: boolean;\r\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => Promise<void>;\r\n}\r\n\r\nconst ModalContext = createContext<ModalContextProps | null>(null);\r\n\r\nconst useModalContext = () => {\r\n  const context = useContext(ModalContext);\r\n  if (!context) {\r\n    throw new Error(\"Modal components must be used within a Modal provider\");\r\n  }\r\n  return context;\r\n};\r\n\r\ntype ModalProps = {\r\n  customId: string;\r\n  title?: string;\r\n  className?: string;\r\n  callback?: (value: string, ...args: any) => Promise<void>;\r\n  children: React.ReactNode;\r\n};\r\n\r\nfunction Modal({\r\n  customId,\r\n  title = \"Feedback\",\r\n  className,\r\n  callback,\r\n  children,\r\n  ...props\r\n}: ModalProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [placeholder, setPlaceholder] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    if (callback) await callback(placeholder);\r\n    setLoading(false);\r\n    setIsOpen(false);\r\n  }\r\n\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        isOpen,\r\n        setIsOpen,\r\n        customId,\r\n        title,\r\n        placeholder,\r\n        setPlaceholder,\r\n        callback,\r\n        loading,\r\n        setLoading,\r\n        handleSubmit,\r\n      }}\r\n    >\r\n      <div className=\"relative\">\r\n        <motion.button\r\n          className={cn(\r\n            \"flex h-9 items-center rounded-lg border border-zinc-950/10 bg-white px-3 text-zinc-950 dark:border-zinc-50/10 dark:bg-zinc-700 dark:text-zinc-50\",\r\n            className\r\n          )}\r\n          layout\r\n          layoutId={`fb-modal-button-${customId}`}\r\n          onClick={() => setIsOpen(true)}\r\n          {...props}\r\n        >\r\n          <motion.span layoutId={`fb-modal-title-${customId}`} className=\"text-sm\">\r\n            {title}\r\n          </motion.span>\r\n        </motion.button>\r\n\r\n        {isOpen && children}\r\n      </div>\r\n    </ModalContext.Provider>\r\n  );\r\n}\r\n\r\ntype ModalContentProps = {\r\n  textClassName?: string;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nfunction ModalContent({ className, children, textClassName, ...props }: ModalContentProps) {\r\n  const { customId, title, setIsOpen, placeholder, setPlaceholder, loading, handleSubmit } =\r\n    useModalContext();\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  useClickOutside(ref, () => setIsOpen(false));\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        ref={ref}\r\n        layoutId={`fb-modal-button-${customId}`}\r\n        className={cn(\r\n          \"absolute top-1/2 left-1/2 h-[193px] w-[314px] -translate-x-1/2 -translate-y-1/2 rounded-lg border border-zinc-950/10 bg-white px-3 text-zinc-950 md:h-[200px] md:w-[364px] dark:border-zinc-50/40 dark:bg-zinc-700 dark:text-zinc-50\",\r\n          className\r\n        )}\r\n        onClick={(e) => e.stopPropagation()}\r\n        {...props}\r\n      >\r\n        {children ? (\r\n          children\r\n        ) : (\r\n          <form className=\"h-full w-full rounded-lg\" onSubmit={handleSubmit}>\r\n            <motion.span\r\n              layoutId={`fb-modal-title-${customId}`}\r\n              aria-hidden=\"true\"\r\n              style={{\r\n                opacity: !placeholder ? 1 : 0,\r\n              }}\r\n              className=\"absolute top-3 left-4 text-sm text-zinc-600 select-none dark:text-zinc-300\"\r\n            >\r\n              {title}\r\n            </motion.span>\r\n\r\n            <textarea\r\n              className={cn(\r\n                \"hidden h-[80%] w-full resize-none rounded-md bg-transparent px-1 py-3 text-sm text-zinc-700 outline-none md:block dark:text-zinc-200\",\r\n                textClassName\r\n              )}\r\n              required\r\n              autoFocus\r\n              onChange={(e) => setPlaceholder(e.target.value)}\r\n              value={placeholder}\r\n            />\r\n            <textarea\r\n              className={cn(\r\n                \"h-[75%] w-full resize-none rounded-md bg-transparent px-1 py-3 text-sm text-zinc-700 outline-none md:hidden dark:text-zinc-200\",\r\n                textClassName\r\n              )}\r\n              required\r\n              onChange={(e) => setPlaceholder(e.target.value)}\r\n              value={placeholder}\r\n            />\r\n\r\n            <button\r\n              className=\"border-primary/10 bg-primary-foreground/80 hover:bg-primary-foreground-800 text-primary ml-auto flex h-7 items-center justify-center rounded-md border px-3 py-4 text-sm font-medium transition-transform duration-200 hover:scale-105 active:scale-95\"\r\n              type=\"submit\"\r\n              aria-label={`Submit ${title}`}\r\n              disabled={loading}\r\n            >\r\n              {loading ? <LoaderIcon className=\"mr-1 h-5 w-5 animate-spin\" /> : `Submit ${title}`}\r\n            </button>\r\n          </form>\r\n        )}\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nfunction FeedbackModal({\r\n  customId,\r\n  className,\r\n  callback,\r\n}: Omit<ModalProps, \"children\" | \"title\"> & { title?: string }) {\r\n  return (\r\n    <Modal customId={customId} className={className} callback={callback}>\r\n      <ModalContent />\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport { Modal, ModalContent };\r\nexport default FeedbackModal;\r\n\r\n// DevelopedBy: AetherUI\r\n",
      "type": "registry:ui"
    },
    {
      "path": "component/content/hooks/useClickOutside.ts",
      "content": "import { RefObject, useEffect } from \"react\";\r\n\r\nfunction useClickOutside<T extends HTMLElement>(\r\n  ref: RefObject<T | null>,\r\n  callback: (e: MouseEvent | TouchEvent) => void\r\n) {\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent | TouchEvent) {\r\n      if (ref.current && !ref.current.contains(event.target as Node)) {\r\n        callback(event);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    document.addEventListener(\"touchstart\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.removeEventListener(\"touchstart\", handleClickOutside);\r\n    };\r\n  }, [ref, callback]);\r\n}\r\n\r\nexport { useClickOutside };\r\n",
      "type": "registry:hook"
    }
  ]
}
