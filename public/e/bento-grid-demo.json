{
  "name": "bento-grid-demo",
  "type": "registry:ui",
  "description": "A Multi-column grid layout with bento boxes.",
  "componentName": "bento-grid-demo",
  "files": [
    {
      "path": "bento-grid-demo.tsx",
      "content": "import BentoGrid from \"@/content/bento-grid\";\r\nimport React from \"react\";\r\n\r\nconst data = [\r\n  {\r\n    id: 1,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1519638399535-1b036603ac77?q=80&w=1031&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n  {\r\n    id: 2,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1519638399535-1b036603ac77?q=80&w=1031&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n  {\r\n    id: 3,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1519638399535-1b036603ac77?q=80&w=1031&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n  {\r\n    id: 4,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1476231682828-37e571bc172f?q=80&w=3474&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n  {\r\n    id: 5,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1476231682828-37e571bc172f?q=80&w=3474&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n  {\r\n    id: 6,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1476231682828-37e571bc172f?q=80&w=3474&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n  {\r\n    id: 7,\r\n    thumbnail:\r\n      \"https://images.unsplash.com/photo-1476231682828-37e571bc172f?q=80&w=3474&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    heading: \"cherry blossom\",\r\n    description: \"japanese too\",\r\n  },\r\n];\r\n\r\nconst BentoGridDemo = () => {\r\n  return <BentoGrid cards={data} className=\"py-1.5\" customId=\"bento-grid-demo\" />;\r\n};\r\n\r\nexport default BentoGridDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "component/content/bento-grid.tsx",
      "content": "\"use client\";\r\n\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useClickOutside } from \"@/hooks/useClickOutside\";\r\n\r\ntype Card = {\r\n  id: number;\r\n  thumbnail: string;\r\n  heading?: string;\r\n  description?: string;\r\n};\r\n\r\ntype BentoGridProps = {\r\n  cards: Card[];\r\n  className?: string;\r\n  customId: string;\r\n  isClickable?: boolean;\r\n};\r\n\r\nconst BentoGrid = ({\r\n  cards,\r\n  className,\r\n  customId,\r\n  isClickable = false,\r\n  ...props\r\n}: BentoGridProps) => {\r\n  const [selected, setSelected] = useState<Card | null>(null);\r\n  const [lastSelected, setLastSelected] = useState<Card | null>(null);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const totalNumbersOfCard = cards.length;\r\n\r\n  const handleClick = (card: Card) => {\r\n    if (!isClickable) return;\r\n    setLastSelected(selected);\r\n    setSelected(card);\r\n  };\r\n\r\n  const handleOutsideClick = () => {\r\n    if (!isClickable) return;\r\n    setLastSelected(selected);\r\n    setSelected(null);\r\n  };\r\n\r\n  useClickOutside(ref, () => handleOutsideClick());\r\n\r\n  const giveClssaNameToChild: { [key: number]: { [key: number]: string } } = {\r\n    3: {\r\n      0: \"col-span-3 md:col-span-1 md:row-span-2\",\r\n      1: \"col-span-2 md:col-span-1\",\r\n      2: \"col-span-5 md:col-span-1\",\r\n    },\r\n    4: {\r\n      0: \"row-span-2\",\r\n      3: \"col-span-2\",\r\n    },\r\n    5: {\r\n      1: \"md:row-span-2\",\r\n      2: \"col-span-2 md:col-span-1\",\r\n    },\r\n    6: {\r\n      0: \"row-span-2\",\r\n      1: \"md:col-span-2\",\r\n      3: \"col-span-2 md:col-span-1\",\r\n      4: \"md:col-span-2\",\r\n    },\r\n    7: {\r\n      0: \"md:row-span-2 md:col-span-2\",\r\n      1: \"row-span-2 md:row-span-1 md:col-span-2\",\r\n      3: \"col-span-2 md:col-span-1\",\r\n      4: \"row-span-2 md:row-span-1 md:col-span-2\",\r\n      5: \"md:col-span-2\",\r\n      6: \"md:col-span-3\",\r\n    },\r\n  };\r\n\r\n  const giveClssaNameToParent: { [key: number]: string } = {\r\n    3: \"gap-2 grid-cols-5 md:grid-cols-2\",\r\n    4: \"gap-2 grid-cols-2 md:grid-rows-2 grid-rows-3 md:grid-cols-3\",\r\n    5: \"gap-2 grid-cols-2 grid-rows-3 md:grid-rows-2 md:grid-cols-3\",\r\n    6: \"gap-2 grid-cols-2 grid-rows-4 md:grid-rows-2 md:grid-cols-3\",\r\n    7: \"gap-2 grid-cols-2 grid-rows-5 md:grid-rows-3 md:grid-cols-5\",\r\n  };\r\n\r\n  const parentGridClassName = giveClssaNameToParent[totalNumbersOfCard];\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        \"group relative mx-auto grid aspect-square max-h-[600px] w-full max-w-[800px]\",\r\n        parentGridClassName,\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {cards.map((card, index) => {\r\n        const className = giveClssaNameToChild[totalNumbersOfCard]?.[index] || \"\";\r\n        return (\r\n          <div key={index} className={cn(className, \"\")}>\r\n            <motion.div\r\n              onClick={() => handleClick(card)}\r\n              className={cn(\r\n                className,\r\n                \"relative overflow-hidden\",\r\n                selected?.id === card.id\r\n                  ? \"absolute inset-0 z-50 m-auto flex h-1/2 w-[90%] cursor-pointer flex-col flex-wrap items-center justify-center rounded-lg md:w-1/2\"\r\n                  : lastSelected?.id === card.id\r\n                    ? \"z-10 h-full w-full rounded-xl bg-white\"\r\n                    : \"h-full w-full rounded-xl bg-white\"\r\n              )}\r\n              layoutId={`card-${customId}-${card.id}`}\r\n            >\r\n              {selected?.id === card.id && <SelectedCard selected={selected} customId={customId} />}\r\n              <ImageComponent card={card} customId={customId} />\r\n            </motion.div>\r\n          </div>\r\n        );\r\n      })}\r\n\r\n      <div\r\n        onClick={handleOutsideClick}\r\n        className={cn(\r\n          \"bg-primary-foreground absolute top-0 left-0 z-10 h-full w-full opacity-0 transition-opacity duration-200\",\r\n          selected?.id ? \"pointer-events-auto\" : \"pointer-events-none\",\r\n          selected?.id ? \"opacity-30\" : \"opacity-0\"\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ImageComponent = ({ card, customId }: { card: Card; customId: string }) => {\r\n  return (\r\n    <motion.img\r\n      layoutId={`image-${customId}-${card.id}-image`}\r\n      src={card.thumbnail}\r\n      height=\"500\"\r\n      width=\"500\"\r\n      className={cn(\r\n        \"group-hover:grey and absolute mt-[0px] h-full w-full rounded-md object-cover object-top transition duration-300 ease-in group-hover:brightness-80 hover:scale-105 hover:brightness-100\"\r\n      )}\r\n      alt=\"thumbnail\"\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectedCard = ({ selected, customId }: { selected: Card | null; customId: string }) => {\r\n  const selectedCardContent = SelectedCardContentElement(selected!);\r\n  return (\r\n    <div className=\"relative z-[15] mt-[-31px] flex h-full w-full flex-col justify-end rounded-lg bg-transparent shadow-2xl\">\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 0.6 }}\r\n        className=\"absolute inset-0 z-10 h-full w-full rounded-md bg-black/40 opacity-60\"\r\n      />\r\n      <AnimatePresence>\r\n        <motion.div\r\n          layoutId={`content-${customId}-${selected?.id}`}\r\n          initial={{ opacity: 0, y: 100 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: 100 }}\r\n          transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n          className=\"relative z-10 px-2\"\r\n        >\r\n          {selectedCardContent}\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectedCardContentElement = (data: Card) => {\r\n  const { heading, description } = data;\r\n  return (\r\n    <div className=\"-mb-1.5 rounded-lg\">\r\n      <p className=\"font-mono text-xl font-bold tracking-wide text-white uppercase md:text-2xl\">\r\n        {heading}\r\n      </p>\r\n      <p className=\"max-w-lg font-mono text-base font-normal text-neutral-200 capitalize\">\r\n        {description}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BentoGrid;\r\n\r\n// DevelopedBy: AetherUI\r\n",
      "type": "registry:ui"
    },
    {
      "path": "component/content/hooks/useClickOutside.ts",
      "content": "import { RefObject, useEffect } from \"react\";\r\n\r\nfunction useClickOutside<T extends HTMLElement>(\r\n  ref: RefObject<T | null>,\r\n  callback: (e: MouseEvent | TouchEvent) => void\r\n) {\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent | TouchEvent) {\r\n      if (ref.current && !ref.current.contains(event.target as Node)) {\r\n        callback(event);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    document.addEventListener(\"touchstart\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.removeEventListener(\"touchstart\", handleClickOutside);\r\n    };\r\n  }, [ref, callback]);\r\n}\r\n\r\nexport { useClickOutside };\r\n",
      "type": "registry:hook"
    }
  ]
}
