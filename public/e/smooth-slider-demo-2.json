{
  "name": "smooth-slider-demo-2",
  "type": "registry:ui",
  "description": "Google's new released series inspired slider component with smooth animation.",
  "componentName": "smooth-slider-demo-2",
  "files": [
    {
      "path": "smooth-slider-demo-2.tsx",
      "content": "import {\r\n  AnimatedSlider as SmoothSlider,\r\n  AnimatedCard,\r\n  CardContent,\r\n  OnHover,\r\n  DefaultView,\r\n} from \"@/content/smooth-slider\";\r\nimport { animeData } from \"@/lib/data\";\r\nimport React from \"react\";\r\n\r\nconst SmoothSliderDemo2 = () => {\r\n  return (\r\n    <div className=\"w-full p-4\">\r\n      <SmoothSlider title=\"Custom Cards\">\r\n        {animeData\r\n          .reverse()\r\n          .slice(0, 5)\r\n          .map((anime) => (\r\n            <AnimatedCard key={anime.id} defaultWidth=\"220px\" expandedWidth=\"400px\" height=\"300px\">\r\n              <CardContent defaultAspectRatio=\"aspect-square\" expandedAspectRatio=\"aspect-[21/9]\">\r\n                <img\r\n                  src={anime.image}\r\n                  alt={anime.title}\r\n                  className=\"h-full w-full object-cover\"\r\n                  style={{ transition: \"all 0.4s ease\" }}\r\n                />\r\n\r\n                <OnHover className=\"bg-gradient-to-t from-cyan-700/90 via-cyan-100/10 to-transparent\">\r\n                  <div className=\"space-y-1\">\r\n                    <h3 className=\"text-xl font-bold text-white\">{anime.title}</h3>\r\n                    <p className=\"text-sm text-gray-200\">\r\n                      {anime.year} · {anime.seasons} · {anime.platform}\r\n                    </p>\r\n\r\n                    <button className=\"mt-3 flex items-center gap-1 rounded bg-cyan-500/30 px-3 py-1 text-sm text-white backdrop-blur-sm transition-colors hover:bg-cyan-500/50\">\r\n                      Watch now\r\n                    </button>\r\n                  </div>\r\n                </OnHover>\r\n\r\n                <DefaultView className=\"bg-gradient-to-t from-cyan-900/90 to-transparent p-4\">\r\n                  {anime.title}\r\n                </DefaultView>\r\n              </CardContent>\r\n            </AnimatedCard>\r\n          ))}\r\n      </SmoothSlider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmoothSliderDemo2;\r\n",
      "type": "registry:component"
    },
    {
      "path": "component/content/smooth-slider.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\n\r\ntype AnimatedCardContextType = {\r\n  isHovered: boolean;\r\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst AnimatedCardContext = createContext<AnimatedCardContextType | null>(null);\r\n\r\nexport const useAnimatedCard = () => {\r\n  const context = useContext(AnimatedCardContext);\r\n  if (!context) {\r\n    throw new Error(\"useAnimatedCard must be used within a AnimatedCard Profvider\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\ntype AnimatedSliderProps = {\r\n  title?: string;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  gap?: number;\r\n  scrollAmount?: number;\r\n} & React.ComponentProps<\"div\">;\r\n\r\nfunction AnimatedSlider({ gap = 16, scrollAmount = 300, ...props }: AnimatedSliderProps) {\r\n  const sliderRef = useRef<HTMLDivElement>(null);\r\n  const [showLeftArrow, setShowLeftArrow] = useState(false);\r\n  const [showRightArrow, setShowRightArrow] = useState(true);\r\n\r\n  const checkArrows = () => {\r\n    if (!sliderRef.current) return;\r\n\r\n    const { scrollLeft, scrollWidth, clientWidth } = sliderRef.current;\r\n    setShowLeftArrow(scrollLeft > 0);\r\n    setShowRightArrow(scrollLeft < scrollWidth - clientWidth - 10); // when there is enough space to scroll to the right\r\n    console.log(\"scrolLeft\", scrollLeft > 0);\r\n    console.log(\"scrollWidth\", scrollLeft < scrollWidth - clientWidth - 10);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const slider = sliderRef.current;\r\n    if (!slider) return;\r\n\r\n    slider.addEventListener(\"scroll\", checkArrows);\r\n    window.addEventListener(\"resize\", checkArrows);\r\n\r\n    checkArrows();\r\n\r\n    return () => {\r\n      slider.removeEventListener(\"scroll\", checkArrows);\r\n      window.removeEventListener(\"resize\", checkArrows);\r\n    };\r\n  }, []);\r\n\r\n  const scrollHandler = (direction: \"left\" | \"right\") => {\r\n    if (!sliderRef.current) return;\r\n\r\n    const currentScroll = sliderRef.current.scrollLeft;\r\n    // left: 500-300 (move 300 units to left), right: 500+300 (move 300 units to right)\r\n    const newScrollLeft =\r\n      direction === \"left\" ? currentScroll - scrollAmount : currentScroll + scrollAmount;\r\n\r\n    sliderRef.current.scrollTo({\r\n      left: newScrollLeft,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"w-full\", props.className)} {...props}>\r\n      {props.title && <h2 className=\"text-primary mb-4 text-2xl font-bold\">{props.title}</h2>}\r\n\r\n      <div className=\"group relative\">\r\n        <div\r\n          ref={sliderRef}\r\n          className=\"scrollbar-hide flex overflow-x-auto pb-4\"\r\n          style={{\r\n            scrollbarWidth: \"none\",\r\n            msOverflowStyle: \"none\",\r\n            gap: `${gap}px`,\r\n          }}\r\n        >\r\n          {props.children}\r\n        </div>\r\n\r\n        {showLeftArrow && (\r\n          <button\r\n            onClick={() => scrollHandler(\"left\")}\r\n            className=\"absolute top-1/2 left-0 z-10 -translate-x-2 -translate-y-1/2 scale-0 rounded-full bg-black/50 p-2 text-white transition-transform group-hover:translate-x-2 group-hover:scale-100\"\r\n            aria-label=\"Scroll left\"\r\n          >\r\n            <ChevronLeft className=\"h-6 w-6\" />\r\n          </button>\r\n        )}\r\n\r\n        {showRightArrow && (\r\n          <button\r\n            onClick={() => scrollHandler(\"right\")}\r\n            className=\"absolute top-1/2 right-0 z-10 translate-x-2 -translate-y-1/2 scale-0 rounded-full bg-black/50 p-2 text-white transition-transform group-hover:-translate-x-2 group-hover:scale-100\"\r\n            aria-label=\"Scroll right\"\r\n          >\r\n            <ChevronRight className=\"h-6 w-6\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nAnimatedSlider.displayName = \"AnimatedSlider\";\r\n\r\ntype AnimatedCardProps = {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  defaultWidth?: string;\r\n  expandedWidth?: string;\r\n  height?: string;\r\n  transitionDuration?: string;\r\n  transitionEasing?:\r\n    | \"linear\"\r\n    | \"ease\"\r\n    | \"ease-in\"\r\n    | \"ease-out\"\r\n    | \"ease-in-out\"\r\n    | `cubic-bezier(${number}, ${number}, ${number}, ${number})`;\r\n} & React.ComponentProps<\"div\">;\r\n\r\nfunction AnimatedCard({\r\n  children,\r\n  className,\r\n  defaultWidth = \"180px\",\r\n  expandedWidth = \"320px\",\r\n  height = \"270px\",\r\n  transitionDuration = \"0.4s\",\r\n  transitionEasing = \"ease\",\r\n  ...props\r\n}: AnimatedCardProps) {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  return (\r\n    <AnimatedCardContext.Provider value={{ isHovered, setIsHovered }}>\r\n      <div\r\n        className={cn(\"relative shrink-0 cursor-pointer\", className)}\r\n        onMouseEnter={() => setIsHovered(true)}\r\n        onMouseLeave={() => setIsHovered(false)}\r\n        style={{\r\n          width: isHovered ? expandedWidth : defaultWidth,\r\n          height,\r\n          transition: `width ${transitionDuration} ${transitionEasing}`,\r\n        }}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </AnimatedCardContext.Provider>\r\n  );\r\n}\r\n\r\nAnimatedCard.displayName = \"AnimatedCard\";\r\n\r\ntype CardContentProps = {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  defaultAspectRatio?: string;\r\n  expandedAspectRatio?: string;\r\n} & React.ComponentProps<\"div\">;\r\n\r\nfunction CardContent({\r\n  className,\r\n  children,\r\n  defaultAspectRatio = \"aspect-[2/3]\",\r\n  expandedAspectRatio = \"aspect-video\",\r\n  ...props\r\n}: CardContentProps) {\r\n  const { isHovered } = useAnimatedCard();\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative h-full w-full overflow-hidden rounded-lg transition-all duration-[400] ease-in\",\r\n        isHovered ? expandedAspectRatio : defaultAspectRatio,\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCardContent.displayName = \"CardContent\";\r\n\r\ntype OnHoverProps = {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  fadeInDuration?: string;\r\n} & React.ComponentProps<\"div\">;\r\n\r\nfunction OnHover({ className, children, fadeInDuration = \"0.3s\", ...props }: OnHoverProps) {\r\n  const { isHovered } = useAnimatedCard();\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-black/90 via-black/60 to-transparent p-4 transition-all duration-300 ease-in-out\",\r\n        isHovered ? \"translate-y-0 opacity-100\" : \"translate-y-full opacity-0\",\r\n        className\r\n      )}\r\n      style={{\r\n        animation: `fadeIn ${fadeInDuration} ease-in-out`,\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nOnHover.displayName = \"OnHover\";\r\n\r\ntype DefaultViewProps = {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n} & React.ComponentProps<\"div\">;\r\n\r\nfunction DefaultView({ className, children, ...props }: DefaultViewProps) {\r\n  const { isHovered } = useAnimatedCard();\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"fade-in-20 absolute right-0 bottom-0 left-0 truncate p-2 text-sm font-medium text-white transition-all duration-200 ease-in-out\",\r\n        !isHovered ? \"translate-y-0 opacity-100\" : \"translate-y-full opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nDefaultView.displayName = \"DefaultView\";\r\n\r\nexport { AnimatedSlider, AnimatedCard, CardContent, OnHover, DefaultView };\r\n",
      "type": "registry:ui"
    }
  ]
}