{
  "name": "smooth-slider-demo-1",
  "type": "registry:component",
  "description": "Google's new released series inspired slider component with smooth animation.",
  "componentName": "smooth-slider-demo-1",
  "files": [
    {
      "path": "smooth-slider-demo-1.tsx",
      "content": "import {\n  AnimatedSlider,\n  AnimatedCard,\n  CardContent,\n  OnHover,\n  DefaultView,\n} from \"@/components/content/smooth-slider\";\nimport { Bookmark } from \"lucide-react\";\nimport Image from \"next/image\";\nimport React from \"react\";\n\nconst animeData = [\n  {\n    id: \"1\",\n    title: \"Solo Leveling\",\n    image: \"https://images.unsplash.com/photo-1578632767115-351597cf2477?q=80&w=1000\",\n    year: \"2024\",\n    seasons: \"1 season\",\n    platform: \"Crunchyroll\",\n  },\n  {\n    id: \"2\",\n    title: \"Ishura\",\n    image: \"https://images.unsplash.com/photo-1580477667995-2b94f01c9516?q=80&w=1000\",\n    year: \"2024\",\n    seasons: \"1 season\",\n    platform: \"Crunchyroll\",\n  },\n  {\n    id: \"3\",\n    title: \"The Apothecary Diaries\",\n    image: \"https://images.unsplash.com/photo-1541562232579-512a21360020?q=80&w=1000\",\n    year: \"2023\",\n    seasons: \"2 seasons\",\n    platform: \"Crunchyroll\",\n  },\n  {\n    id: \"4\",\n    title: \"Zenshu\",\n    image: \"https://images.unsplash.com/photo-1560972550-aba3456b5564?q=80&w=1000\",\n    year: \"2023\",\n    seasons: \"1 season\",\n    platform: \"Netflix\",\n  },\n  {\n    id: \"5\",\n    title: \"Sakamoto Days\",\n    image: \"https://images.unsplash.com/photo-1607604276583-eef5d076aa5f?q=80&w=1000\",\n    year: \"2024\",\n    seasons: \"1 season\",\n    platform: \"Crunchyroll\",\n  },\n  {\n    id: \"6\",\n    title: \"Dr. Stone\",\n    image: \"https://images.unsplash.com/photo-1618336753974-aae8e04506aa?q=80&w=1000\",\n    year: \"2019\",\n    seasons: \"3 seasons\",\n    platform: \"Crunchyroll\",\n  },\n  {\n    id: \"7\",\n    title: \"Unnamed Memory\",\n    image: \"https://images.unsplash.com/photo-1705831156575-a5294d295a31?q=80&w=1000\",\n    year: \"2024\",\n    seasons: \"1 season\",\n    platform: \"Crunchyroll\",\n  },\n  {\n    id: \"8\",\n    title: \"I Got Married to the Male Lead\",\n    image: \"https://images.unsplash.com/photo-1601850494422-3cf14624b0b3?q=80&w=1000\",\n    year: \"2024\",\n    seasons: \"1 season\",\n    platform: \"Crunchyroll\",\n  },\n];\n\nconst SmoothSliderDemo1 = () => {\n  return (\n    <div className=\"w-full p-4\">\n      <AnimatedSlider title=\"Popular Anime\">\n        {animeData.map((anime) => (\n          <AnimatedCard key={anime.id}>\n            <CardContent>\n              <Image\n                src={anime.image}\n                alt={anime.title}\n                width={100}\n                height={100}\n                className=\"h-full w-full object-cover\"\n                style={{ transition: \"all 0.4s ease\" }}\n              />\n              <div className=\"absolute top-2 right-2 z-10\">\n                <button className=\"text-white transition-colors hover:text-gray-200\">\n                  <Bookmark className=\"h-5 w-5\" />\n                </button>\n              </div>\n              <OnHover fadeInDuration=\"0.5s\">\n                <div className=\"space-y-1\">\n                  <h3 className=\"text-xl font-bold text-white\">{anime.title}</h3>\n                  <p className=\"text-sm text-gray-200\">\n                    {anime.year} · {anime.seasons} · {anime.platform}\n                  </p>\n                  <button className=\"mt-3 flex items-center gap-1 rounded bg-white/20 px-3 py-1 text-sm text-white backdrop-blur-sm transition-colors hover:bg-white/30\">\n                    Watch options\n                  </button>\n                </div>\n              </OnHover>\n              <DefaultView>{anime.title}</DefaultView>\n            </CardContent>\n          </AnimatedCard>\n        ))}\n      </AnimatedSlider>\n    </div>\n  );\n};\n\nexport default SmoothSliderDemo1;\n",
      "type": "registry:component",
      "target": "components/smooth-slider-demo-1.tsx"
    },
    {
      "path": "components/content/smooth-slider.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\n\ntype AnimatedCardContextType = {\n  isHovered: boolean;\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst AnimatedCardContext = createContext<AnimatedCardContextType | null>(null);\n\nexport const useAnimatedCard = () => {\n  const context = useContext(AnimatedCardContext);\n  if (!context) {\n    throw new Error(\"useAnimatedCard must be used within a AnimatedCard Provider\");\n  }\n\n  return context;\n};\n\ntype AnimatedSliderProps = {\n  title?: string;\n  children: React.ReactNode;\n  className?: string;\n  gap?: number;\n  scrollAmount?: number;\n} & React.ComponentProps<\"div\">;\n\nfunction AnimatedSlider({ gap = 16, scrollAmount = 300, ...props }: AnimatedSliderProps) {\n  const sliderRef = useRef<HTMLDivElement>(null);\n  const [showLeftArrow, setShowLeftArrow] = useState(false);\n  const [showRightArrow, setShowRightArrow] = useState(true);\n\n  const checkArrows = () => {\n    if (!sliderRef.current) return;\n\n    const { scrollLeft, scrollWidth, clientWidth } = sliderRef.current;\n    setShowLeftArrow(scrollLeft > 0);\n    setShowRightArrow(scrollLeft < scrollWidth - clientWidth - 10); // when there is enough space to scroll to the right\n  };\n\n  useEffect(() => {\n    const slider = sliderRef.current;\n    if (!slider) return;\n\n    slider.addEventListener(\"scroll\", checkArrows);\n    window.addEventListener(\"resize\", checkArrows);\n\n    checkArrows();\n\n    return () => {\n      slider.removeEventListener(\"scroll\", checkArrows);\n      window.removeEventListener(\"resize\", checkArrows);\n    };\n  }, []);\n\n  const scrollHandler = (direction: \"left\" | \"right\") => {\n    if (!sliderRef.current) return;\n\n    const currentScroll = sliderRef.current.scrollLeft;\n    // left: 500-300 (move 300 units to left), right: 500+300 (move 300 units to right)\n    const newScrollLeft =\n      direction === \"left\" ? currentScroll - scrollAmount : currentScroll + scrollAmount;\n\n    sliderRef.current.scrollTo({\n      left: newScrollLeft,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <div className={cn(\"w-full\", props.className)} {...props}>\n      {props.title && <h2 className=\"text-primary mb-4 text-2xl font-bold\">{props.title}</h2>}\n\n      <div className=\"group relative\">\n        <div\n          ref={sliderRef}\n          className=\"scrollbar-hide flex overflow-x-auto pb-4\"\n          style={{\n            scrollbarWidth: \"none\",\n            msOverflowStyle: \"none\",\n            gap: `${gap}px`,\n          }}\n        >\n          {props.children}\n        </div>\n\n        {showLeftArrow && (\n          <button\n            onClick={() => scrollHandler(\"left\")}\n            className=\"absolute top-1/2 left-0 z-10 -translate-x-2 -translate-y-1/2 scale-0 rounded-full bg-black/50 p-2 text-white transition-transform group-hover:translate-x-2 group-hover:scale-100\"\n            aria-label=\"Scroll left\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </button>\n        )}\n\n        {showRightArrow && (\n          <button\n            onClick={() => scrollHandler(\"right\")}\n            className=\"absolute top-1/2 right-0 z-10 translate-x-2 -translate-y-1/2 scale-0 rounded-full bg-black/50 p-2 text-white transition-transform group-hover:-translate-x-2 group-hover:scale-100\"\n            aria-label=\"Scroll right\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nAnimatedSlider.displayName = \"AnimatedSlider\";\n\ntype AnimatedCardProps = {\n  className?: string;\n  children: React.ReactNode;\n  defaultWidth?: string;\n  expandedWidth?: string;\n  height?: string;\n  transitionDuration?: string;\n  transitionEasing?:\n    | \"linear\"\n    | \"ease\"\n    | \"ease-in\"\n    | \"ease-out\"\n    | \"ease-in-out\"\n    | `cubic-bezier(${number}, ${number}, ${number}, ${number})`;\n} & React.ComponentProps<\"div\">;\n\nfunction AnimatedCard({\n  children,\n  className,\n  defaultWidth = \"180px\",\n  expandedWidth = \"320px\",\n  height = \"270px\",\n  transitionDuration = \"0.4s\",\n  transitionEasing = \"ease\",\n  ...props\n}: AnimatedCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  return (\n    <AnimatedCardContext.Provider value={{ isHovered, setIsHovered }}>\n      <div\n        className={cn(\"relative shrink-0 cursor-pointer\", className)}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        style={{\n          width: isHovered ? expandedWidth : defaultWidth,\n          height,\n          transition: `width ${transitionDuration} ${transitionEasing}`,\n        }}\n        {...props}\n      >\n        {children}\n      </div>\n    </AnimatedCardContext.Provider>\n  );\n}\n\nAnimatedCard.displayName = \"AnimatedCard\";\n\ntype CardContentProps = {\n  className?: string;\n  children: React.ReactNode;\n  defaultAspectRatio?: string;\n  expandedAspectRatio?: string;\n} & React.ComponentProps<\"div\">;\n\nfunction CardContent({\n  className,\n  children,\n  defaultAspectRatio = \"aspect-[2/3]\",\n  expandedAspectRatio = \"aspect-video\",\n  ...props\n}: CardContentProps) {\n  const { isHovered } = useAnimatedCard();\n\n  return (\n    <div\n      className={cn(\n        \"relative h-full w-full overflow-hidden rounded-lg transition-all duration-[400] ease-in\",\n        isHovered ? expandedAspectRatio : defaultAspectRatio,\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nCardContent.displayName = \"CardContent\";\n\ntype OnHoverProps = {\n  className?: string;\n  children: React.ReactNode;\n  fadeInDuration?: string;\n} & React.ComponentProps<\"div\">;\n\nfunction OnHover({ className, children, fadeInDuration = \"0.3s\", ...props }: OnHoverProps) {\n  const { isHovered } = useAnimatedCard();\n\n  return (\n    <div\n      className={cn(\n        \"absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-black/90 via-black/60 to-transparent p-4 transition-all duration-300 ease-in-out\",\n        isHovered ? \"translate-y-0 opacity-100\" : \"translate-y-full opacity-0\",\n        className\n      )}\n      style={{\n        animation: `fadeIn ${fadeInDuration} ease-in-out`,\n      }}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nOnHover.displayName = \"OnHover\";\n\ntype DefaultViewProps = {\n  className?: string;\n  children: React.ReactNode;\n} & React.ComponentProps<\"div\">;\n\nfunction DefaultView({ className, children, ...props }: DefaultViewProps) {\n  const { isHovered } = useAnimatedCard();\n\n  return (\n    <div\n      className={cn(\n        \"fade-in-20 absolute right-0 bottom-0 left-0 truncate p-2 text-sm font-medium text-white transition-all duration-200 ease-in-out\",\n        !isHovered ? \"translate-y-0 opacity-100\" : \"translate-y-full opacity-0\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nDefaultView.displayName = \"DefaultView\";\n\nexport { AnimatedSlider, AnimatedCard, CardContent, OnHover, DefaultView };\n",
      "type": "registry:ui",
      "target": "components/content/smooth-slider.tsx"
    }
  ]
}
