{
  "name": "help-desk",
  "type": "registry:ui",
  "registryDependencies": [],
  "title": "Help Desk",
  "author": "Harshit Pant",
  "description": "Got a question? We're here to help, click the help desk and resolve your queries.",
  "dependencies": [],
  "files": [
    {
      "path": "help-desk.tsx",
      "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { MessageSquare, X } from \"lucide-react\";\r\nimport React, { createContext, useCallback, useContext, useEffect, useRef } from \"react\";\r\n\r\ntype HelpDeskContextType = {\r\n  email: string;\r\n  message: string;\r\n  status: FeedbackStatus;\r\n  setEmail: React.Dispatch<React.SetStateAction<string>>;\r\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n  handleOpenChange: (open: boolean) => void;\r\n  isOpen: boolean;\r\n  showSuccess: boolean;\r\n  showError: boolean;\r\n};\r\n\r\nconst HelpDeskContext = createContext<HelpDeskContextType | null>(null);\r\n\r\nexport const useHelpDesk = () => {\r\n  const context = useContext(HelpDeskContext);\r\n  if (!context) {\r\n    throw new Error(\"useHelpDesk must be used within a HelpDesk Provider\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport type FeedbackStatus = \"idle\" | \"submitting\" | \"success\" | \"error\";\r\n\r\ntype HelpDeskProviderProps = {\r\n  children: React.ReactNode;\r\n  defaultOpen?: boolean;\r\n  open?: boolean;\r\n  onOpenChange?: (open: boolean) => void;\r\n  status?: FeedbackStatus;\r\n  onSubmit?: (data: { email: string; message: string }) => void | Promise<void>;\r\n} & React.PropsWithChildren;\r\n\r\nfunction HelpDeskProvider({\r\n  children,\r\n  defaultOpen = false,\r\n  open: controlledOpen,\r\n  onOpenChange,\r\n  status = \"idle\",\r\n  onSubmit,\r\n}: HelpDeskProviderProps) {\r\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(defaultOpen);\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [showSuccess, setShowSuccess] = React.useState(false);\r\n  const [showError, setShowError] = React.useState(false);\r\n\r\n  const closingAnimationRef = useRef<NodeJS.Timeout | null>(null);\r\n  const successResetTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const errorResetTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Determine if the component is controlled or uncontrolled\r\n  const isControlled = controlledOpen !== undefined;\r\n  const isOpen = isControlled ? controlledOpen : uncontrolledOpen;\r\n\r\n  const handleOpenChange = useCallback(\r\n    (newOpen: boolean) => {\r\n      if (closingAnimationRef.current) clearTimeout(closingAnimationRef.current);\r\n      if (successResetTimerRef.current) clearTimeout(successResetTimerRef.current);\r\n      if (errorResetTimerRef.current) clearTimeout(errorResetTimerRef.current);\r\n\r\n      if (!isControlled) setUncontrolledOpen(newOpen);\r\n      onOpenChange?.(newOpen);\r\n    },\r\n    [isControlled, onOpenChange]\r\n  );\r\n\r\n  // Wait for closing animation to finish\r\n  useEffect(() => {\r\n    if (!isOpen) {\r\n      if (closingAnimationRef.current) clearTimeout(closingAnimationRef.current);\r\n      if (errorResetTimerRef.current) clearTimeout(errorResetTimerRef.current);\r\n\r\n      successResetTimerRef.current = setTimeout(() => {\r\n        setShowSuccess(false);\r\n        setShowError(false);\r\n        successResetTimerRef.current = null;\r\n      }, 300);\r\n    }\r\n\r\n    return () => {\r\n      if (successResetTimerRef.current) clearTimeout(successResetTimerRef.current);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (status === \"submitting\") return;\r\n\r\n    setShowError(false);\r\n    setShowSuccess(false);\r\n    if (closingAnimationRef.current) clearTimeout(closingAnimationRef.current);\r\n    if (errorResetTimerRef.current) clearTimeout(errorResetTimerRef.current);\r\n    try {\r\n      await onSubmit?.({ email, message });\r\n      setShowSuccess(true);\r\n\r\n      setEmail(\"\");\r\n      setMessage(\"\");\r\n      closingAnimationRef.current = setTimeout(() => {\r\n        handleOpenChange(false);\r\n        closingAnimationRef.current = null;\r\n      }, 1500);\r\n    } catch (err) {\r\n      console.log(\"Setting showError = true\");\r\n      console.error(err);\r\n      setShowError(true);\r\n\r\n      errorResetTimerRef.current = setTimeout(() => {\r\n        setShowError(false);\r\n        errorResetTimerRef.current = null;\r\n      }, 3000);\r\n    }\r\n  };\r\n  return (\r\n    <HelpDeskContext.Provider\r\n      value={{\r\n        email,\r\n        message,\r\n        status,\r\n        setEmail,\r\n        setMessage,\r\n        handleSubmit,\r\n        handleOpenChange,\r\n        isOpen,\r\n        showSuccess,\r\n        showError,\r\n      }}\r\n    >\r\n      {children}\r\n    </HelpDeskContext.Provider>\r\n  );\r\n}\r\n\r\nHelpDeskProvider.displayName = \"HelpDeskProvider\";\r\n\r\nexport type HelpDeskProps = {\r\n  children: React.ReactNode;\r\n  title?: string;\r\n  subtitle?: string;\r\n  className?: string;\r\n} & React.ComponentProps<\"div\">;\r\n\r\nfunction HelpDesk({\r\n  children,\r\n  title = \"How can we help you?\",\r\n  subtitle = \"Send us a message and we'll get back to you as soon as possible.\",\r\n  className,\r\n  ...props\r\n}: HelpDeskProps) {\r\n  const { isOpen, showSuccess, showError, handleOpenChange } = useHelpDesk();\r\n\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n        <div\r\n          className=\"fixed inset-0 z-40 bg-black opacity-50 transition-opacity duration-300\"\r\n          onClick={() => handleOpenChange(false)}\r\n        />\r\n      )}\r\n\r\n      <div\r\n        className={cn(\r\n          \"fixed right-4 bottom-24 z-50 w-[90vw] max-w-md overflow-hidden rounded-xl bg-white shadow-2xl transition-all duration-300 dark:bg-zinc-900\",\r\n          isOpen ? \"translate-y-0 opacity-100\" : \"pointer-events-none translate-y-20 opacity-0\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {showSuccess ? (\r\n          <SuccessBox />\r\n        ) : showError ? (\r\n          <ErrorBox />\r\n        ) : (\r\n          <div className=\"relative p-6\">\r\n            <button\r\n              onClick={() => handleOpenChange(false)}\r\n              className=\"absolute top-4 right-4 rounded-full p-1 text-zinc-400 transition-colors hover:bg-zinc-100 hover:text-zinc-600 dark:hover:bg-zinc-800 dark:hover:text-zinc-200\"\r\n            >\r\n              <X size={20} />\r\n              <span className=\"sr-only\">Close</span>\r\n            </button>\r\n\r\n            <div>\r\n              <h2 className=\"mb-1 text-xl font-bold dark:text-white\">{title}</h2>\r\n              <p className=\"mb-6 text-zinc-500 dark:text-zinc-400\">{subtitle}</p>\r\n            </div>\r\n\r\n            {children}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nHelpDesk.displayName = \"HelpDesk\";\r\n\r\nexport type HelpDeskFomrProps = {\r\n  className?: string;\r\n  btnClassName?: string;\r\n} & React.ComponentProps<\"form\">;\r\n\r\nfunction HelpDeskForm({ className, btnClassName, ...props }: HelpDeskFomrProps) {\r\n  const { status, email, message, handleSubmit, setEmail, setMessage } = useHelpDesk();\r\n  return (\r\n    <form onSubmit={handleSubmit} className={cn(\"space-y-4\", className)} {...props}>\r\n      <div className=\"space-y-2\">\r\n        <label\r\n          htmlFor=\"email\"\r\n          className=\"block text-sm font-medium text-zinc-700 dark:text-zinc-300\"\r\n        >\r\n          Email\r\n        </label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          placeholder=\"your@email.com\"\r\n          required\r\n          className=\"w-full rounded-md border border-zinc-300 bg-white px-3 py-2 text-zinc-900 placeholder-zinc-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none dark:border-zinc-700 dark:bg-zinc-800 dark:text-zinc-100 dark:placeholder-zinc-500 dark:focus:border-blue-400 dark:focus:ring-blue-400\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <label\r\n          htmlFor=\"message\"\r\n          className=\"block text-sm font-medium text-zinc-700 dark:text-zinc-300\"\r\n        >\r\n          Message\r\n        </label>\r\n        <textarea\r\n          id=\"message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"How can we help you?\"\r\n          required\r\n          rows={4}\r\n          className=\"min-h-24 w-full rounded-md border border-zinc-300 bg-white px-3 py-2 text-zinc-900 placeholder-zinc-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none dark:border-zinc-700 dark:bg-zinc-800 dark:text-zinc-100 dark:placeholder-zinc-500 dark:focus:border-blue-400 dark:focus:ring-blue-400\"\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        disabled={status === \"submitting\"}\r\n        className={cn(\r\n          \"w-full rounded-md px-4 py-2 font-medium text-white transition-colors focus:ring-2 focus:ring-offset-2 focus:outline-none\",\r\n          status === \"submitting\"\r\n            ? \"cursor-not-allowed bg-zinc-400 dark:bg-zinc-600\"\r\n            : \"bg-blue-600 hover:bg-blue-700 focus:ring-blue-500\",\r\n          btnClassName\r\n        )}\r\n      >\r\n        {status === \"submitting\" ? \"Submitting...\" : \"Submit\"}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nHelpDeskForm.displayName = \"HelpDeskForm\";\r\n\r\ntype HelpDeskButtonProps = {\r\n  className?: string;\r\n} & React.ComponentProps<\"button\">;\r\n\r\nfunction HelpDeskButton({ className, ...props }: HelpDeskButtonProps) {\r\n  const { handleOpenChange, isOpen } = useHelpDesk();\r\n  return (\r\n    <button\r\n      onClick={() => handleOpenChange(!isOpen)}\r\n      className={cn(\r\n        \"fixed right-4 bottom-4 z-50 flex h-14 w-14 items-center justify-center rounded-full bg-blue-500 text-white shadow-lg transition-transform duration-200 hover:scale-105 hover:bg-blue-600 active:scale-95\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {isOpen ? <X size={24} /> : <MessageSquare size={24} />}\r\n    </button>\r\n  );\r\n}\r\n\r\nHelpDeskButton.displayName = \"HelpDeskButton\";\r\n\r\nfunction SuccessBox() {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center p-8 text-center\">\r\n      <div className=\"mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-green-500 text-white\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"32\"\r\n          height=\"32\"\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"3\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          className=\"checkmark\"\r\n        >\r\n          <polyline points=\"20 6 9 17 4 12\" />\r\n        </svg>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold dark:text-white\">Thanks for your feedback!</h3>\r\n      <p className=\"text-zinc-500 dark:text-zinc-400\">We'll get back to you soon.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ErrorBox() {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center p-8 text-center\">\r\n      <div className=\"mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-red-500 text-white\">\r\n        <X size={32} className=\"animate-caret-blink\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold dark:text-white\">Something went wrong!</h3>\r\n      <p className=\"text-zinc-500 dark:text-zinc-400\">Please try again later.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { HelpDeskProvider, HelpDesk, HelpDeskForm, HelpDeskButton };\r\n",
      "type": "registry:ui"
    }
  ]
}